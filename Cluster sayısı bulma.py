import os
os.environ["OMP_NUM_THREADS"] = "4"
import math
from sklearn.cluster import KMeans

# Haversine distance function
def haversine(coord1, coord2):
    R = 6371  # Radius of the Earth in kilometers
    lat1, lon1 = coord1
    lat2, lon2 = coord2
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)
    a = math.sin(dlat / 2) * math.sin(dlat / 2) + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2) * math.sin(dlon / 2)
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    distance = R * c
    return distance

# Nearest Neighbor Heuristic for a cluster
def nearest_neighbor_heuristic(cluster, depot):
    # Start with the depot
    route = [depot]
    remaining_nodes = cluster.copy()
    
    while remaining_nodes:
        # Find the nearest node to the last node in the route
        last_node = route[-1]
        distances = [haversine(last_node, node) for node in remaining_nodes]
        nearest_node_index = distances.index(min(distances))
        nearest_node = remaining_nodes.pop(nearest_node_index)
        route.append(nearest_node)
    
    # Return to the depot at the end
    route.append(depot)
    return route

# Calculate total distance for a cluster (using Nearest Neighbor Heuristic)
def calculate_total_distance(cluster, depot):
    # Apply Nearest Neighbor Heuristic to get the route
    route = nearest_neighbor_heuristic(cluster, depot)
    
    # Calculate the total distance of the route
    total_distance = 0
    for i in range(len(route) - 1):
        total_distance += haversine(route[i], route[i + 1])
    return total_distance

# Calculate metrics for each cluster
def calculate_metrics(clusters, depot):
    metrics = []
    for cluster in clusters:
        total_distance = calculate_total_distance(cluster, depot)
        num_nodes = len(cluster) + 1
        distance_per_node = total_distance / num_nodes if num_nodes > 0 else 0
        metrics.append((total_distance, num_nodes, distance_per_node))
    return metrics

# Example usage
if __name__ == "__main__":
    # Input coordinates (first one is depot)
    coordinates = [[41.019734, 28.81971], [41.02602, 28.82905], [41.0322, 28.82415], [41.03434, 28.8332], [41.03234, 28.82719], [41.04208, 28.82851], [41.02782, 28.8291], [41.03158, 28.82734], [41.0302, 28.82899], [41.03576, 28.82673], [41.04016, 28.82502], [41.03634, 28.83274], [41.03608, 28.83282], [41.0313, 28.82828], [41.03487, 28.82285], [41.0396, 28.82519], [41.02895, 28.82572], [41.01078, 28.82474], [41.00199, 28.83423], [40.99878, 28.83053], [41.00859, 28.82193], [41.00227, 28.83577], [41.00714, 28.81988], [41.00326, 28.83072], [41.00881, 28.83086], [41.00576, 28.82782], [40.99799, 28.83085], [41.00297, 28.83599], [41.00817, 28.8329], [40.99968, 28.83045], [41.00571, 28.83097], [41.00317, 28.83063], [41.00255, 28.83048], [41.00213, 28.83393], [41.0077, 28.81984], [41.00279, 28.83604], [40.99854, 28.83082], [40.9979, 28.83468], [41.01119, 28.82867], [41.00815, 28.85395], [41.00512, 28.8441], [41.00987, 28.85501], [41.00577, 28.8445], [41.00567, 28.84485], [41.00678, 28.85301], [40.99758, 28.84846], [41.00853, 28.84895], [40.99942, 28.84662], [41.00461, 28.84346], [41.00864, 28.8496], [41.00686, 28.84714], [41.00471, 28.84345], [40.99917, 28.85226], [41.03067, 28.83867], [41.0405, 28.84485], [41.02657, 28.83591], [41.03921, 28.84449], [41.02525, 28.83666], [41.0306, 28.83904], [41.03525, 28.84121], [41.04506, 28.83714], [41.04448, 28.83297], [41.03153, 28.84416], [41.03143, 28.844], [41.04364, 28.84111], [41.03075, 28.83783], [41.0549, 28.82542], [41.06006, 28.8358], [41.04814, 28.82217], [41.05421, 28.84883], [41.05672, 28.84225], [41.04435, 28.82023], [41.0544, 28.84569], [41.04434, 28.81931], [41.10403, 28.86451], [41.04713, 28.85006], [41.05089, 28.84942], [41.04835, 28.85265], [41.05632, 28.84585], [41.03983, 28.81678], [41.06019, 28.83569], [41.00878, 28.87152], [41.00549, 28.88701], [41.00664, 28.86902], [41.01079, 28.87049], [41.00642, 28.87068], [41.0155, 28.87553], [41.01081, 28.86759], [41.00577, 28.86982], [40.99978, 28.8703], [41.00144, 28.874], [41.00336, 28.87093], [41.00447, 28.88763], [41.00609, 28.87018], [41.00649, 28.89176], [41.00636, 28.88403], [41.00687, 28.86951], [41.09623, 28.78814], [41.09623, 28.7909], [41.08429, 28.77111], [41.10239, 28.78701], [41.09484, 28.77081], [41.10226, 28.78703], [41.0951, 28.77448], [41.09858, 28.76646], [41.10033, 28.79022], [41.02142, 28.83977], [41.11218, 28.78581], [41.10364, 28.79214], [41.09398, 28.775], [41.11199, 28.78498], [41.03396, 28.79644], [41.03777, 28.79811], [41.03354, 28.77447], [41.0357, 28.78919], [41.03783, 28.7983], [41.03664, 28.78836], [41.03355, 28.80022], [41.0327, 28.80025], [41.03337, 28.80022], [41.03703, 28.78402], [41.03311, 28.79984], [41.06, 28.74877], [41.03529, 28.78749], [41.04559, 28.78274], [41.04362, 28.78395], [41.03544, 28.79396], [41.0511, 28.79667], [41.047, 28.8004], [41.05481, 28.79922], [41.05732, 28.80775], [41.05296, 28.80591], [41.05771, 28.80125], [41.05284, 28.79818], [41.06106, 28.80147], [41.05203, 28.79875], [41.05811, 28.79877], [41.04828, 28.8008], [41.05029, 28.80319], [41.05404, 28.79501], [41.10927, 28.80325], [41.11479, 28.81034], [41.09347, 28.80551], [41.11022, 28.80399], [41.10704, 28.78471], [41.09056, 28.81102], [41.10078, 28.81058], [41.11002, 28.80115], [41.10493, 28.80379], [41.09743, 28.80579], [41.10905, 28.78911], [41.10802, 28.78975], [41.10679, 28.80359], [41.12037, 28.80708], [41.12019, 28.8075], [41.10855, 28.80333], [40.97926, 28.85509], [40.97857, 28.86987], [40.9774, 28.87706], [40.97766, 28.87685], [40.97926, 28.8551], [40.97849, 28.87509], [40.97914, 28.87355], [40.97869, 28.87964], [40.97806, 28.87267], [40.97829, 28.87212], [40.97769, 28.8769], [40.97819, 28.87171], [40.98343, 28.86834], [40.99183, 28.83519], [40.98926, 28.87012], [40.98249, 28.87297], [40.9882, 28.8693], [40.99384, 28.86665], [40.99214, 28.86988], [40.98969, 28.86953], [40.98732, 28.86599], [40.98754, 28.8661], [40.98105, 28.87006], [40.9868, 28.86887], [40.98232, 28.87126], [41.11845, 28.77374], [41.11283, 28.76782], [41.11711, 28.77373], [41.13167, 28.78009], [41.11739, 28.77048], [41.12238, 28.7703], [41.11923, 28.76654], [41.11711, 28.77347], [41.1262, 28.77207], [41.11902, 28.77281], [41.1227, 28.77899], [41.12066, 28.7683], [41.01965, 28.82418], [41.02255, 28.8392], [41.02748, 28.85722], [41.01776, 28.84158], [41.01837, 28.83188], [41.02941, 28.85426], [41.02428, 28.85081], [41.0241, 28.85692], [41.01818, 28.83243], [41.01485, 28.84199], [41.03148, 28.85003], [41.01786, 28.82593], [41.01433, 28.83542], [41.04302, 28.84782], [41.04775, 28.84593], [41.01456, 28.83531], [41.04588, 28.84645], [41.04919, 28.83479], [41.04896, 28.83851], [41.04917, 28.8384], [40.98085, 28.79397], [40.98951, 28.79653], [40.96996, 28.79621], [40.95922, 28.83478], [40.98056, 28.79331], [40.9597, 28.82166], [40.96167, 28.82469], [40.95851, 28.82128], [40.96392, 28.83777], [40.96379, 28.83763], [40.97981, 28.79449], [41.00128, 28.77555], [40.99954, 28.78], [40.99861, 28.78637], [40.99657, 28.76948], [40.99498, 28.7912], [40.99393, 28.79101], [40.99274, 28.78692], [40.9906, 28.77146], [41.00238, 28.79934], [40.99824, 28.76625], [41.00056, 28.79316], [40.99404, 28.76789], [40.99699, 28.77676], [41.00121, 28.79735], [40.99928, 28.78542], [40.99659, 28.77578], [40.99812, 28.77808], [40.99623, 28.79155], [40.99713, 28.77644], [41.04447, 28.76268], [41.04043, 28.7706], [41.05556, 28.7642], [40.99954, 28.79665], [41.05662, 28.79019], [41.0578, 28.77666], [41.05292, 28.75341], [41.05458, 28.7911], [41.05471, 28.76214], [40.98635, 28.61674], [41.00192, 28.78634], [41.00251, 28.78824], [41.0095, 28.80104], [41.0242, 28.80073], [41.01474, 28.79731], [41.02653, 28.79636], [41.00336, 28.79283], [41.02465, 28.79643], [41.0091, 28.79973], [41.00481, 28.79416], [41.00267, 28.78858], [41.00673, 28.79858], [41.00241, 28.79292], [41.01, 28.77869], [41.01113, 28.77649], [41.01752, 28.78528], [41.01749, 28.78498], [41.02205, 28.7895], [41.01366, 28.78738], [41.02004, 28.78652], [41.01173, 28.78182], [41.00998, 28.7747], [41.02173, 28.78627], [41.01147, 28.77735], [41.02058, 28.79162], [41.04509, 28.8221], [41.04868, 28.85969], [41.04183, 28.86832], [41.05047, 28.85793], [41.03977, 28.87029], [41.03808, 28.85012], [41.04339, 28.86287], [41.04322, 28.85001], [41.03858, 28.87124], [41.10249, 28.76225], [41.08194, 28.75223], [41.07455, 28.74939], [41.08325, 28.75242], [41.08665, 28.75115], [41.0777, 28.75076], [41.07301, 28.74893], [41.07434, 28.75195], [41.10081, 28.76186], [41.10135, 28.76213], [41.08682, 28.75241], [41.06846, 28.753], [40.98183, 28.87632], [40.99018, 28.87662], [40.99831, 28.86532], [40.98867, 28.87346], [40.98799, 28.8763], [40.99791, 28.86503], [40.99727, 28.86732], [40.98886, 28.87139], [40.9963, 28.86331], [40.99205, 28.88238], [40.99069, 28.88239], [40.99365, 28.87432], [40.9957, 28.86425], [40.99597, 28.87042], [40.99054, 28.87073], [41.02978, 28.86965], [41.03493, 28.8549], [41.03605, 28.86014], [41.02716, 28.87245], [41.03296, 28.86349], [41.03083, 28.86966], [41.03947, 28.85785], [41.03648, 28.85858], [41.03351, 28.86174], [41.03467, 28.86679], [41.02575, 28.86134], [41.03436, 28.86568], [41.04027, 28.8593], [41.03421, 28.85995], [40.99417, 28.8474], [41.00317, 28.84295], [40.99977, 28.84421], [41.01183, 28.83889], [41.00821, 28.83881], [40.996, 28.84095], [41.0084, 28.84147], [40.99227, 28.84081], [40.99451, 28.84576], [41.00304, 28.84291], [40.99462, 28.8413], [41.01148, 28.83453], [41.00671, 28.84161], [40.98804, 28.78032], [40.98884, 28.78093], [40.99639, 28.77529], [40.99363, 28.77587], [40.99302, 28.77779], [40.98986, 28.7864], [40.99277, 28.78173], [40.99501, 28.77398], [40.98679, 28.78414], [40.99068, 28.78592], [40.99197, 28.77848], [40.98703, 28.78417], [41.00214, 28.77796], [40.98894, 28.7905], [40.98655, 28.78256], [40.99093, 28.78424], [40.99939, 28.79783], [40.99096, 28.77703], [41.03067, 28.87929], [41.03563, 28.88602], [41.02525, 28.87271], [41.03343, 28.88799], [41.03381, 28.88571], [41.03773, 28.87727], [41.0297, 28.89694], [41.03522, 28.88561], [41.02721, 28.86959], [41.03253, 28.87887], [41.02693, 28.88161], [41.03547, 28.87944], [41.00726, 28.86092], [41.00844, 28.85911], [40.99825, 28.85663], [41.00024, 28.8607], [41.01281, 28.85876], [41.00201, 28.86023], [41.0079, 28.86406], [41.01127, 28.86132], [40.99837, 28.85601], [41.00348, 28.85935], [40.99959, 28.85742], [41.02293, 28.85738], [41.0218, 28.85616], [41.02042, 28.85999], [41.02289, 28.85679], [41.01426, 28.8696], [41.01609, 28.86127], [41.01426, 28.86499], [41.01411, 28.86328], [41.01662, 28.86256], [41.02024, 28.85869], [41.01724, 28.86497], [41.01671, 28.86888], [41.01446, 28.86503], [41.01715, 28.86044], [41.02201, 28.85613], [41.04424, 28.87849], [41.05024, 28.8604], [41.04128, 28.88248], [41.05332, 28.85363], [41.04649, 28.87338], [41.04569, 28.88007], [41.0392, 28.87739], [41.0461, 28.87777], [41.04512, 28.82214], [41.04211, 28.87758], [41.04513, 28.82206], [41.04542, 28.8788], [41.04229, 28.87845], [41.01872, 28.87535], [41.02297, 28.87718], [41.02373, 28.86803], [41.02145, 28.87067], [41.01944, 28.89975], [41.02107, 28.87962], [41.01452, 28.88337], [41.01604, 28.89648], [41.02155, 28.87041], [41.01953, 28.87462], [41.01578, 28.8777], [40.99788, 28.85626], [40.98885, 28.84529], [40.98465, 28.84658], [40.9941, 28.85229], [40.98582, 28.84913], [40.99704, 28.85532], [40.99706, 28.85518], [40.99732, 28.85544], [40.99581, 28.85402], [40.99726, 28.85566], [40.9853, 28.83361], [40.99881, 28.88644], [41.03779, 28.83134], [41.06612, 28.82475], [41.04759, 28.80988]]
    k = 17  # Number of clusters

    # Extract depot and nodes
    depot = coordinates[0]
    nodes = coordinates[1:]

    # Perform KMeans clustering on the nodes
    kmeans = KMeans(n_clusters=k, random_state=0).fit(nodes)
    labels = kmeans.labels_

    # Assign nodes to clusters
    clusters = [[] for _ in range(k)]
    for i, label in enumerate(labels):
        clusters[label].append(nodes[i])

    # Include depot in each cluster
    #for cluster in clusters:
        #cluster.insert(0, depot)

    # Calculate metrics for each cluster
    metrics = calculate_metrics(clusters, depot)

    # Print results for each cluster
    for i, (total_distance, num_nodes, distance_per_node) in enumerate(metrics):
        print(f"Cluster {i+1}:")
        print(f"  Total Distance: {total_distance:.2f} km")
        print(f"  Number of Nodes: {num_nodes}")
        print(f"  Distance per Node: {distance_per_node:.2f} km")

    # Calculate the final metric: sum of distances per node divided by number of clusters
    sum_distance_per_node = sum(distance_per_node for _, _, distance_per_node in metrics)
    final_metric = sum_distance_per_node / k
    print(f"\nFinal Metric (Sum of Distance per Node / Number of Clusters): {final_metric:.2f} km")

    # Divide the final metric by 35
    final_metric_divided_by_35 = final_metric / 35
    print(f"Final Metric Divided by 35: {final_metric_divided_by_35:.2f} km")

    servicesomething = final_metric_divided_by_35 + 0.05
    a = 3 / servicesomething
    b = int(len(coordinates)) / a
    print(f"Number of needed Clusters: {b}")