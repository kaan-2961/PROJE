import gurobipy as gp
from gurobipy import GRB
from haversine import haversine, Unit

# Function to calculate haversine distance
def calculate_haversine_distance(coord1, coord2):
    return haversine(coord1, coord2, unit=Unit.KILOMETERS)

# Function to solve TSP for a given set of coordinates (cluster)
def solve_tsp_for_cluster(coordinates, speed_km_per_hr, service_time_hr, tmax, time_limit, optimality_gap):
    n = len(coordinates)

    # Create a dictionary to hold the travel times
    travel_times = {}
    for i in range(n):
        travel_times[i] = {}
        for j in range(n):
            if i != j:
                travel_times[i][j] = calculate_haversine_distance(coordinates[i], coordinates[j]) / speed_km_per_hr

    # Create a Gurobi model
    model = gp.Model("TSP")

    # Set time limit and optimality gap
    model.setParam('TimeLimit', time_limit)  # Set time limit in seconds
    model.setParam('MIPGap', optimality_gap)  # Set optimality gap (e.g., 0.05 for 5%)

    # Create binary variables for the routes
    x = model.addVars(n, n, vtype=GRB.BINARY, name="x")

    # Set the objective function: minimize the total travel time
    model.setObjective(gp.quicksum(travel_times[i][j] * x[i, j]
                                    for i in range(n) for j in range(n) if i != j), GRB.MINIMIZE)

    # Constraints: each city must be entered and exited exactly once
    for i in range(n):
        model.addConstr(gp.quicksum(x[i, j] for j in range(n) if i != j) == 1)  # City i is visited once
        model.addConstr(gp.quicksum(x[j, i] for j in range(n) if i != j) == 1)  # City i is left once

    # Subtour elimination (using Miller-Tucker-Zemlin formulation)
    u = model.addVars(n, vtype=GRB.CONTINUOUS, name="u")
    for i in range(1, n):
        model.addConstr(u[i] >= 2)
        for j in range(1, n):
            if i != j:
                model.addConstr(u[i] - u[j] + (n-1) * x[i, j] <= n-2)

    # Travel time constraint: total travel time must not exceed shift time (tmax)
    total_service_time = n * service_time_hr  # Each city has the same service time
    total_travel_time = gp.quicksum(travel_times[i][j] * x[i, j] for i in range(n) for j in range(n) if i != j) + total_service_time
    model.addConstr(total_travel_time <= tmax, "TimeConstraint")

    # Optimize the model
    model.optimize()

    # Extract and display the optimal tour and its travel time
    if model.status == GRB.OPTIMAL or model.status == GRB.TIME_LIMIT:
        tour = []
        current_city = 0
        tour.append(current_city)

        total_distance = 0
        total_travel_time = 0

        while len(tour) < n:
            for j in range(n):
                if x[current_city, j].x > 0.5:  # If this route is part of the optimal tour
                    tour.append(j)
                    total_distance += calculate_haversine_distance(coordinates[current_city], coordinates[j])
                    total_travel_time += travel_times[current_city][j]
                    current_city = j
                    break

        # Ensure the tour ends at the depot (city 0)
        for j in range(n):
            if x[current_city, j].x > 0.5 and j == 0:  # Returning to the depot
                tour.append(j)
                total_distance += calculate_haversine_distance(coordinates[current_city], coordinates[j])
                total_travel_time += travel_times[current_city][j]
                break

        return total_distance, total_travel_time
    elif model.status == GRB.INFEASIBLE:
        print("Model is infeasible. Please check the constraints.")
        return None, None
    else:
        print(f"Unexpected model status: {model.status}")
        return None, None

# Function to optimize clusters
def optimize_clusters(clusters, speed_km_per_hr, service_time_hr, tmax, time_limit, optimality_gap, hiring_cost_per_cluster):
    total_distance = 0
    total_hiring_cost = 0

    for idx, cluster in enumerate(clusters):
        distance, travel_time = solve_tsp_for_cluster(cluster, speed_km_per_hr, service_time_hr, tmax, time_limit, optimality_gap)
        if distance:
            total_distance += distance
            total_hiring_cost += hiring_cost_per_cluster  # Add hiring cost for each cluster

    # Calculate total system cost
    total_system_cost = 2 * total_distance + total_hiring_cost

    # Print summary
    print(f"Number of Clusters: {len(clusters)}")
    print(f"Total Distance: {total_distance:.2f} km")
    print(f"Total Hiring Cost: {total_hiring_cost:.2f}")
    print(f"Total System Cost: {total_system_cost:.2f}")

# Example usage
speed_km_per_hr = 35  # For example, 50 km/h (you can adjust this based on your scenario)
service_time_hr = 0.05  # 30 minutes per city (adjustable)
tmax = 3  # Maximum time for the shift (in hours, for example, 8 hours)
time_limit = 300 # Time limit in seconds (e.g., 60 seconds)
optimality_gap = 0.001  #Silinmeli Optimality gap (e.g., 5%)
hiring_cost_per_cluster = 50


clusters = [[[41.019734, 28.81971], [40.98635, 28.61674], [41.01079, 28.79847], [41.0061, 28.79811], [41.0242, 28.80073], [41.01474, 28.79731], [41.02653, 28.79636], [41.02465, 28.79643], [41.0091, 28.79973], [41.00673, 28.79858], [41.01, 28.77869], [41.01749, 28.78498], [41.02205, 28.7895], [41.01366, 28.78738], [41.02004, 28.78652], [41.01749, 28.78521], [41.02173, 28.78627], [41.01147, 28.77735], [41.02058, 28.79162]], [[41.019734, 28.81971], [40.96421, 28.83819], [40.95922, 28.83478], [40.97259, 28.80423], [40.95851, 28.82128], [40.96392, 28.83777], [40.96379, 28.83763], [40.99978, 28.8703], [40.97926, 28.85509], [40.9774, 28.87706], [40.97926, 28.8551], [40.97849, 28.87509], [40.97914, 28.87355], [40.97869, 28.87964], [40.97806, 28.87267], [40.97829, 28.87212], [40.97769, 28.8769], [40.97892, 28.87213], [40.97966, 28.87484], [40.97819, 28.87171], [40.98343, 28.86834], [40.98926, 28.87012], [40.98249, 28.87297], [40.98732, 28.86599], [40.98754, 28.8661], [40.98105, 28.87006], [40.9868, 28.86887], [40.99237, 28.88436], [40.99018, 28.87662], [40.99727, 28.86732], [40.98886, 28.87139], [40.99205, 28.88238], [40.99069, 28.88239], [40.99365, 28.87432], [40.9957, 28.86425], [40.99054, 28.87073], [40.99288, 28.88349], [40.99881, 28.88644]], [[41.019734, 28.81971], [41.03354, 28.77447], [41.03703, 28.78402], [41.04362, 28.78395], [41.04447, 28.76268], [41.04043, 28.7706], [41.05556, 28.7642], [41.0578, 28.77666], [41.05292, 28.75341], [41.05471, 28.76214], [41.02842, 28.7753], [41.08429, 28.77111], [41.09484, 28.77081], [41.0951, 28.77448], [41.09398, 28.775], [41.10249, 28.76225], [41.08194, 28.75223], [41.07455, 28.74939], [41.08177, 28.75215], [41.08325, 28.75242], [41.08665, 28.75115], [41.0777, 28.75076], [41.07434, 28.75195], [41.10081, 28.76186], [41.10135, 28.76213], [41.08682, 28.75241]], [[41.019734, 28.81971], [41.02602, 28.82905], [41.03434, 28.8332], [41.02782, 28.8291], [41.03158, 28.82734], [41.0302, 28.82899], [41.03576, 28.82673], [41.03102, 28.82927], [41.03634, 28.83274], [41.03608, 28.83282], [41.0313, 28.82828], [41.03487, 28.82285], [41.0396, 28.82519], [41.02895, 28.82572], [41.02525, 28.83666], [41.03086, 28.84659], [41.0306, 28.83904], [41.03525, 28.84121], [41.04448, 28.83297], [41.03153, 28.84416], [41.03143, 28.844], [41.03075, 28.83783], [41.0549, 28.82542], [41.04435, 28.82023], [41.04434, 28.81931], [41.03983, 28.81678], [41.02142, 28.83977], [41.02245, 28.83912], [41.02255, 28.8392], [41.02528, 28.81553], [41.04509, 28.8221], [41.04513, 28.82206], [41.03779, 28.83134]], [[41.019734, 28.81971], [41.06501, 28.79226], [41.03396, 28.79644], [41.0357, 28.78919], [41.03783, 28.7983], [41.03664, 28.78836], [41.03355, 28.80022], [41.0327, 28.80025], [41.03337, 28.80022], [41.03386, 28.80313], [41.03783, 28.79847], [41.03311, 28.79984], [41.03544, 28.79396], [41.05943, 28.79879], [41.0511, 28.79667], [41.05471, 28.79464], [41.047, 28.8004], [41.05481, 28.79922], [41.05732, 28.80775], [41.05702, 28.80761], [41.05296, 28.80591], [41.05771, 28.80125], [41.05284, 28.79818], [41.06106, 28.80147], [41.05203, 28.79875], [41.05811, 28.79877], [41.04828, 28.8008], [41.05029, 28.80319], [41.05404, 28.79501], [41.05557, 28.78605], [41.05492, 28.79224], [41.05662, 28.79019], [41.05458, 28.7911], [41.03997, 28.81039], [41.04759, 28.80988]], [[41.019734, 28.81971], [41.0405, 28.84485], [41.03921, 28.84449], [41.04364, 28.84111], [41.06006, 28.8358], [41.046, 28.85154], [41.05421, 28.84883], [41.05672, 28.84225], [41.0544, 28.84569], [41.10403, 28.86451], [41.04713, 28.85006], [41.05089, 28.84942], [41.04835, 28.85265], [41.05632, 28.84585], [41.06019, 28.83569], [41.03148, 28.85003], [41.0517, 28.84262], [41.04775, 28.84593], [41.04588, 28.84645], [41.04919, 28.83479], [41.04896, 28.83851], [41.05049, 28.85791], [41.05047, 28.85793], [41.03808, 28.85012], [41.04322, 28.85001], [41.03493, 28.8549], [41.03481, 28.8553], [41.03947, 28.85785], [41.05024, 28.8604], [41.05332, 28.85363], [41.06612, 28.82475]], [[41.019734, 28.81971], [41.01078, 28.82474], [41.00199, 28.83423], [40.99878, 28.83053], [41.00859, 28.82193], [41.00227, 28.83577], [41.00714, 28.81988], [41.00326, 28.83072], [41.00881, 28.83086], [41.00262, 28.8305], [41.00576, 28.82782], [40.99799, 28.83085], [41.00297, 28.83599], [41.00817, 28.8329], [40.99968, 28.83045], [41.00571, 28.83097], [41.00317, 28.83063], [41.00255, 28.83048], [41.00213, 28.83393], [41.0077, 28.81984], [41.00279, 28.83604], [40.9979, 28.83468], [41.01119, 28.82867], [40.99183, 28.83519], [41.01965, 28.82418], [41.01776, 28.84158], [41.01831, 28.83251], [41.01485, 28.84199], [41.01786, 28.82593], [41.01465, 28.83501], [41.01433, 28.83542], [41.01456, 28.83531], [41.01604, 28.82458], [40.99913, 28.8387], [41.01183, 28.83889], [41.00821, 28.83881], [41.0084, 28.84147], [41.01148, 28.83453], [41.00982, 28.81493], [40.9853, 28.83361]], [[41.019734, 28.81971], [40.98085, 28.79397], [40.96996, 28.79621], [40.98526, 28.79617], [40.97981, 28.79449], [41.00128, 28.77555], [40.99954, 28.78], [40.99861, 28.78637], [40.99498, 28.7912], [40.99393, 28.79101], [40.99274, 28.78692], [40.99824, 28.76625], [41.00056, 28.79316], [40.99404, 28.76789], [40.99699, 28.77676], [41.00121, 28.79735], [40.99928, 28.78542], [40.99659, 28.77578], [40.99812, 28.77808], [40.99623, 28.79155], [41.00192, 28.78634], [41.00251, 28.78824], [41.00336, 28.79283], [41.00267, 28.78858], [41.00241, 28.79292], [40.98804, 28.78032], [40.98884, 28.78093], [40.99639, 28.77529], [40.99363, 28.77587], [40.99302, 28.77779], [40.98986, 28.7864], [40.98833, 28.78191], [40.99277, 28.78173], [40.99501, 28.77398], [40.99995, 28.79734], [40.99197, 28.77848], [40.98703, 28.78417], [41.00214, 28.77796], [40.98894, 28.7905], [40.99093, 28.78424], [40.99939, 28.79783]], [[41.019734, 28.81971], [41.04183, 28.86832], [41.04149, 28.87133], [41.0447, 28.86895], [41.04187, 28.871], [41.03977, 28.87029], [41.04339, 28.86287], [41.03858, 28.87124], [41.02978, 28.86965], [41.03605, 28.86014], [41.03007, 28.86985], [41.02845, 28.86527], [41.03296, 28.86349], [41.03083, 28.86966], [41.03351, 28.86174], [41.03467, 28.86679], [41.03421, 28.85995], [41.03067, 28.87929], [41.03563, 28.88602], [41.03773, 28.87727], [41.03343, 28.88799], [41.03381, 28.88571], [41.03773, 28.87727], [41.0297, 28.89694], [41.03522, 28.88561], [41.03253, 28.87887], [41.02693, 28.88161], [41.03547, 28.87944], [41.0319, 28.87701], [41.04424, 28.87849], [41.04128, 28.88248], [41.04649, 28.87338], [41.04569, 28.88007], [41.0392, 28.87739], [41.0461, 28.87777], [41.04389, 28.8748], [41.04211, 28.87758], [41.04037, 28.88336], [41.04395, 28.87964], [41.01944, 28.89975], [41.01604, 28.89648]], [[41.019734, 28.81971], [41.09623, 28.7909], [41.10239, 28.78701], [41.10226, 28.78703], [41.10127, 28.78728], [41.11218, 28.78581], [41.10364, 28.79214], [41.11199, 28.78498], [41.11479, 28.81034], [41.11022, 28.80399], [41.10704, 28.78471], [41.09056, 28.81102], [41.10078, 28.81058], [41.11002, 28.80115], [41.09743, 28.80579], [41.10905, 28.78911], [41.10651, 28.78756], [41.10802, 28.78975], [41.10679, 28.80359], [41.12037, 28.80708], [41.12019, 28.8075], [41.10855, 28.80333], [41.11845, 28.77374], [41.11283, 28.76782], [41.11711, 28.77373], [41.13167, 28.78009], [41.11739, 28.77048], [41.12238, 28.7703], [41.11923, 28.76654], [41.11711, 28.77347], [41.12251, 28.77141], [41.1262, 28.77207], [41.12395, 28.77161], [41.1227, 28.77899], [41.12066, 28.7683]], [[41.019734, 28.81971], [41.00815, 28.85395], [41.00512, 28.8441], [41.00987, 28.85501], [41.00577, 28.8445], [41.00567, 28.84485], [41.00678, 28.85301], [40.99758, 28.84846], [41.00853, 28.84895], [40.99942, 28.84662], [41.00461, 28.84346], [41.00515, 28.84431], [40.99917, 28.85226], [41.00649, 28.84896], [41.0108, 28.85005], [41.0169, 28.84888], [40.99831, 28.86532], [40.99791, 28.86503], [40.9963, 28.86331], [41.00317, 28.84295], [40.99977, 28.84421], [40.99268, 28.84227], [40.99227, 28.84081], [40.99451, 28.84576], [41.00304, 28.84291], [40.99462, 28.8413], [41.00024, 28.8607], [41.00108, 28.85698], [41.00141, 28.85514], [41.00201, 28.86023], [41.0052, 28.85914], [41.00231, 28.8553], [40.99837, 28.85601], [40.99957, 28.85926], [41.00348, 28.85935], [40.99959, 28.85742], [40.9936, 28.85213], [40.98155, 28.85016], [40.99788, 28.85626], [40.98885, 28.84529], [40.98465, 28.84658], [40.9941, 28.85229], [40.98582, 28.84913], [40.99704, 28.85532], [40.99706, 28.85518], [40.99581, 28.85402], [40.99382, 28.85224]], [[41.019734, 28.81971], [41.00878, 28.87152], [41.00664, 28.86902], [41.01079, 28.87049], [41.00642, 28.87068], [41.0155, 28.87553], [41.01081, 28.86759], [41.00577, 28.86982], [41.00144, 28.874], [41.00336, 28.87093], [41.00447, 28.88763], [41.00609, 28.87018], [41.00649, 28.89176], [41.00636, 28.88403], [41.00687, 28.86951], [41.02748, 28.85722], [41.02941, 28.85426], [41.02428, 28.85081], [41.02575, 28.86134], [41.01419, 28.85722], [41.00726, 28.86092], [41.00844, 28.85911], [41.00946, 28.85897], [41.01281, 28.85876], [41.01127, 28.86132], [41.01603, 28.8577], [41.02293, 28.85738], [41.0218, 28.85616], [41.02289, 28.85679], [41.01419, 28.86521], [41.01426, 28.8696], [41.01426, 28.86499], [41.01662, 28.86256], [41.02024, 28.85869], [41.01724, 28.86497], [41.01427, 28.86499], [41.01671, 28.86888], [41.01715, 28.86044], [41.02201, 28.85613], [41.02297, 28.87718], [41.02145, 28.87067], [41.02417, 28.87289], [41.02034, 28.87828], [41.02107, 28.87962], [41.02015, 28.87892], [41.01452, 28.88337], [41.02155, 28.87041], [41.01953, 28.87462], [41.01578, 28.8777]]]

optimize_clusters(clusters, speed_km_per_hr, service_time_hr, tmax, time_limit,optimality_gap, hiring_cost_per_cluster)